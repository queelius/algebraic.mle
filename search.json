[{"path":"https://queelius.github.io/algebraic.mle/articles/dgp.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Dynamic failure rate model","text":"algebraic.mle can installed GitHub using devtools package R:","code":"install.packages(\"devtools\") devtools::install_github(\"queelius/algebraic.mle\") devtools::install_github(\"queelius/algebraic.dist\")"},{"path":"https://queelius.github.io/algebraic.mle/articles/dgp.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Dynamic failure rate model","text":"primary focus package likelihood log-likelihood, fundamental statistical concepts parametric model. integral Bayesian frequentist statistics, well prioritize likelihood. algebraic.mle package enables easy handling MLEs, , certain conditions assumptions (independence identical distribution (iid) sample), present numerous advantages, including asymptotic normality uniformly minimum variance unbiased estimator theta.","code":""},{"path":"https://queelius.github.io/algebraic.mle/articles/dgp.html","id":"api-overview","dir":"Articles","previous_headings":"","what":"API Overview","title":"Dynamic failure rate model","text":"main object algebraic.mle package mle object, represents fitted model. package provides number generic methods designed mle objects. comprehensive list functions available function reference algebraic.mle.","code":""},{"path":"https://queelius.github.io/algebraic.mle/articles/dgp.html","id":"fitting-exponential-models","dir":"Articles","previous_headings":"","what":"Fitting exponential models","title":"Dynamic failure rate model","text":"example fitting conditional exponential model data using algebraic.mle. true DGP given Y | x ~ X(x) + W$ X(x) ~ EXP(rate(x)), W ~ N(0, 1e-3), rate(x) = exp(b0 + b1 * x). analysis, care x distributed, take observable exogenous variable. interested conditional distribution Y | x. Let’s fit conditional exponential model data DGP. true DGP bit complicated, salient part exponential component, gaussian term may thought added noise, say, imprecise measurement. course, true DGP unknown practice, arriving conditional exponential model matter judgement domain knowledge. model, Y | x ~ EXP(rate(x)) rate(x) = exp(b0 + b1*x). First, let’s define DGP (data generating process): Let’s generate date: Now, define two functions, resp, rate, loglik function used define model. Let’s fit model. ’ll use optim function stats fit model wrap mle object using mle_numerical. Let’s plot :","code":"library(algebraic.dist) #> Registered S3 method overwritten by 'algebraic.dist': #>   method     from  #>   print.dist stats b0 <- -.1 b1 <- 0.5  dgp <- function(n, x) {     rate <- exp(b0 + b1 * x)     X <- rexp(n, rate)     W <- rnorm(n, 0, 1e-3)     return(X + W) } n <- 75 # number of observations set.seed(1231) # for reproducibility df <- data.frame(x = rep(NA, n), y = rep(NA, n)) for (i in 1:n) {     x <- runif(1, -10, 10)     y <- dgp(n = 1, x = x)     df[i, ] <- c(x, y) } resp <- function(df) df$y rate <- function(df, beta) exp(beta[1] + beta[2] * df$x) loglik <- function(df, resp, rate) {   function(beta) sum(dexp(x = resp(df), rate = rate(df, beta), log = TRUE)) } library(algebraic.mle)  # initial guess for the parameters par0 <- c(0, 0) names(par0) <- c(\"b0\", \"b1\")  sol <- mle_numerical(optim(par = par0,     fn = loglik(df, resp, rate),     control = list(fnscale = -1),     hessian = TRUE)) summary(sol) #> Maximum likelihood estimator of type mle_numerical is normally distributed. #> The estimates of the parameters are given by: #>         b0         b1  #> -0.2253626  0.4560893  #> The standard error is  0.1167634 0.02145606 . #> The asymptotic 95% confidence interval of the parameters are given by: #> Warning in confint.mle(object$x): Unknown number of observations, using large #> sample approximation. #>          2.5%       97.5% #> b0 -0.4542147 0.003489406 #> b1  0.4140362 0.498142415 #> The MSE of the individual componetns in a multivariate estimator is: #> [1] 0.0136336902 0.0004603623 #> The MSE of the estimator is  0.01363369 0.0003746527 0.0003746527 0.0004603623 . #> The log-likelihood is  -119.6977 . #> The AIC is  243.3954 . # plot the x-y points from the data frame plot(df$x,df$y)  # now overlay a plot of the conditional mean x <- seq(-10, 10, .1) b0.hat <- params(sol)[1] b1.hat <- params(sol)[2] y.hat <- 1/exp(b0.hat + b1.hat*x) y <- 1/exp(b0 + b1*x) lines(x, y, col = \"green\", lwd = 10) lines(x, y.hat, col = \"blue\", lwd = 10)"},{"path":"https://queelius.github.io/algebraic.mle/articles/dgp.html","id":"hypothesis-test-and-model-selection","dir":"Articles","previous_headings":"Fitting exponential models","what":"Hypothesis test and model selection","title":"Dynamic failure rate model","text":"Let’s test hypothesis b0 = 0 using likelihood ratio test. can use LRT null model special case (nested) full model. null model Y | x ~ EXP(rate(x)) rate(x) = exp(b1*x), full model Y | x ~ EXP(rate(x)) rate(x) = exp(b0 + b1*x). Let’s compute likelihood ratio test statistic p-value: see p < 0.05, just barely, say data compatible null hypothesis b0 = 0. wanted model selection, use AIC: AIC measure, since full model AIC less null model, choose full model. actually know DGP models reasonable approximations, full model closer approximation. “models wrong, useful.” - George Box Eventually, sufficiently large sample, model DGP can discarded, reality complex never large enough sample never able come model exactly DGP. Let’s another test, b1 = 0, .e., ’s unconditional exponential model, just standard exponential distribution. p-value essentially zero, reject null hypothesis b1 = 0. Let’s compare confidence intervals models. see 95% confidence interval b0 include zero, reject null hypothesis b0 = 0. 95% confidence interval b1 include zero, reject null hypothesis b1 = 0. can see tutorials examples using package vignettes.","code":"# construct null model where b1 = 0 rate_b0_zero <- function(df, b1) exp(b1 * df$x)  # initial guess for the parameters # fit the model under the null hypothesis sol2 <- mle_numerical(optim(par = 0,     fn = loglik(df, resp, rate_b0_zero),     control = list(fnscale = -1),     hessian = TRUE,     method = \"BFGS\")) summary(sol2) #> Maximum likelihood estimator of type mle_numerical is normally distributed. #> The estimates of the parameters are given by: #> [1] 0.4617093 #> The standard error is  0.01899941 . #> The asymptotic 95% confidence interval of the parameters are given by: #>             2.5%     97.5% #> param1 0.4244712 0.4989475 #> The MSE of the estimator is  0.0003609774 . #> The MSE of the estimator is  0.0003609774 . #> The log-likelihood is  -121.7164 . #> The AIC is  245.4328 . (lrt.sol2 <- -2 * (loglik_val(sol2) - loglik_val(sol))) #> [1] 4.037435 pchisq(lrt.sol2, df = 1, lower.tail = FALSE) # compute the p-value #> [1] 0.04450142 aic(sol) #> [1] 243.3954 aic(sol2) #> [1] 245.4328 rate_b1_zero <- function(df, b0) exp(b0) # fit the model under the null hypothesis sol3 <- mle_numerical(optim(par = 0,     fn = loglik(df, resp, rate_b1_zero),     control = list(fnscale = -1),     hessian = TRUE,     method = \"BFGS\")) (lrt.sol3 <- -2 * (loglik_val(sol2) - loglik_val(sol))) #> [1] 4.037435 pchisq(lrt.sol3, df = 1, lower.tail = FALSE) # compute the p-value #> [1] 0.04450142 CI <- confint(sol) #> Warning in confint.mle(sol): Unknown number of observations, using large sample #> approximation. # print the confidence interval print(CI) #>          2.5%       97.5% #> b0 -0.4542147 0.003489406 #> b1  0.4140362 0.498142415"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Statistics and characteristics of the MLE","text":"R package algebraic.mle can installed GitHub using devtools package R:","code":"install.packages(\"devtools\") devtools::install_github(\"queelius/algebraic.mle\")"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"normal-distribution","dir":"Articles","previous_headings":"","what":"Normal distribution","title":"Statistics and characteristics of the MLE","text":"going classic Normal distribution demonstrate use algebraic.mle. using reasons: ’s well-understood, can compare results known results. ’s common distribution, ’s useful good understanding properties. MLE multivariate, can demonstrate use algebraic.mle multivariate distributions. , first, define simple MLE solver normal distribution. can see, return mle object, give sub-class mle_normal (also subclass mle algebraic.dist’s dist) can specialize methods MLE normal distribution, e.g., bias.mle_normal show later.","code":"fit_normal <- function(data) {     sigma <- function(data) {         mean((data - mean(data))^2)     }     loglik <- function(par, data) {         n <- length(data)         -n / 2 * log(2 * pi * par[2]) - 1 / (2 * par[2]) *             (sum(data^2) - 2 * par[1] * sum(data) + n * par[1]^2)     }     par.hat <- c(mu = mean(data), var = sigma(data))     H <- numDeriv::hessian(func = loglik, x = par.hat, data = data)     algebraic.mle::mle(         theta.hat = par.hat,         loglike = loglik(par.hat, data),         score = numDeriv::grad(func = loglik, x = par.hat, data = data),         sigma = MASS::ginv(-H),         info = -H,         obs = NULL,         nobs = length(data),         superclasses = c(\"mle_normal\")) }"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"monte-carlo-mc-simulation-of-the-sampling-distribution-of-the-mle","dir":"Articles","previous_headings":"","what":"Monte-carlo (MC) simulation of the sampling distribution of the MLE","title":"Statistics and characteristics of the MLE","text":"Let’s define theta_samp_mc, stands Monte Carlo simulation sampling distribution MLE. takes sample size n, true parameter value theta, number simulations B run. returns matrix B rows two columns, first column MLE mean second column MLE variance. matrix mles sample MLEs sampling distribution MLE. empirical distribution MLE \\((\\mu, \\sigma^2)'\\) samples size \\(n\\) \\(X_i \\sim N(\\mu, \\sigma^2)\\) \\(=1,\\ldots,n\\). particular example Monte Carlo simulation sampling distribution, since simulating sampling distribution repeatedly sampling population distribution computing MLE sample. bootstrap, resample sample, population, large enough sample, two produce nearly identical results. See bootstrap section details, ’ll compare two. sufficiently large number simulations \\(B\\), empirical sampling distribution close true sampling distribution. can plot empirical sampling distribution MLEs using plot function mles matrix. Sampling distribution MLEs. algebraic.dist, can use empirical_dist represent empirical sampling distribution giving sample MLEs previously generated: general, MLE assuming regularity conditions hold, asymptotic sampling distribution MLE normal mean \\(\\theta\\) variance-covariance matrix \\(\\Sigma = ^{-1}(\\theta)_n\\), \\(\\) Fisher information matrix \\(n\\) sample size. However, general: don’t know asymptotic sampling distribution good approximation true sampling distribution. cases, empirical sampling distribution may used instead. may confident implementation MLE correct, case empirical sampling distribution can used check implementation. regularity conditions may hold, case asymptotic sampling distribution may known. cases, empirical sampling distribution may used instead. caveats mind, compare statistics empirical sampling distribution MLE normal distribution asymptotic sampling distribution. Let’s look basic parameters sampling distribution MLE normal distribution. First, let’s look mean: mean looks pretty close true parameter vector \\[     \\theta = (\\mu = 1, \\sigma^2 = 1)'. \\] can actually compute parameter, since theta.mc, models concept distribution. particular, models distribution algebraic.dist, thus API exposed algebraic.dist available us. instance, can compute various parameters sampling distribution MLE using expectation function: use mean variance-covariance matrix parameterize multivariate normal distribution (MVN), instance, don’t .","code":"theta_samp_mc <- function(n, theta, B = 10000) {     mu <- theta[1]     var <- theta[2]     mles <- matrix(NA, nrow = B, ncol = 2)     for (i in 1:B) {         d <- rnorm(n, mean = mu, sd = sqrt(var))         mles[i, ] <- params(fit_normal(d))     }     colnames(mles) <- c(\"mu\", \"var\")     mles } # Set up the parameters of a simulation set.seed(913254) n <- 70 mu <- 1 var <- 1 B <- 10000 theta <- c(mu, var) mles <- theta_samp_mc(n = n, theta = theta, B = B) head(mles) #>         mu   var #> [1,] 0.891 0.728 #> [2,] 1.033 1.102 #> [3,] 1.105 1.094 #> [4,] 1.146 0.832 #> [5,] 0.916 0.895 #> [6,] 0.986 0.904 theta.mc <- algebraic.dist::empirical_dist(mles) (mu.mc <- mean(theta.mc)) #>    mu   var  #> 0.999 0.988 # should sum to 1 expectation(theta.mc, function(x) 1) #> [1] 1 # mean expectation(theta.mc, function(x) x) #>    mu   var  #> 0.999 0.988 # variance of (mu, var) expectation(theta.mc, function(x) (x - mu.mc)^2) #>     mu    var  #> 0.0142 0.0289 # kurtosis of (mu, var)  expectation(theta.mc, function(x) (x - mu.mc)^4) /     expectation(theta.mc, function(x) (x - mu.mc)^2)^2 #>   mu  var  #> 3.01 3.11 # skewness of mu and var -- should be (0, 0) expectation(theta.mc, function(x) ((x - mu.mc) / theta)^3) #>         mu        var  #> -0.0000342  0.0017230 # covariance of (mu, var) -- should be around 0 expectation(theta.mc, function(x) (x[1] - mu.mc[1]) * (x[2] - mu.mc[2])) #> [1] -0.0000648"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"bias","dir":"Articles","previous_headings":"","what":"Bias","title":"Statistics and characteristics of the MLE","text":"Bias measure systematic error estimator; measures far average value true value estimated. Formally, defined difference expected value estimator true value parameter, .e., \\[ \\operatorname{Bias}(\\hat\\theta) = E_{\\hat\\theta}(\\hat\\theta) - \\theta, \\] \\(E_{\\hat\\theta}\\) denotes expectation operator respect sampling distribution \\(\\hat\\theta\\). (Normally, drop subscript expectation operator write \\(E\\) instead \\(E_{\\hat\\theta}\\) unless ’s clear context expectation operator using.) bias zero, estimator unbiased, otherwise biased. Analytically, asymptotic bias MLE parameters normal distribution \\[     \\operatorname{Bias}(\\hat\\theta) = \\left(\\begin{array}{c}         0 \\\\         -\\frac{\\sigma^2}{n}     \\end{array}\\right). \\] Plugging true value \\(\\sigma^2 = 1\\) sample size \\(n = 70\\), get \\((0, 0.02857143)'\\). may also provide appropriate implementation bias method algebraic.mle mle_normal (called object returned fit_normal): Now, let’s compute bias using function, estimate bias provided bias.mle_emp: asymptotic bias empirical bias pretty close. Let’s see bias variance changes sample size increases.","code":"bias.mle_normal <- function(x, par = NULL, ...) {     if (is.null(par)) {         par <- params(x)     }     c(mu = 0, var = -(1 / nobs(x)) * par[2]) } # first, we sample some data from the true distribution data <- rnorm(n = n, mean = mu, sd = sqrt(var))  # now we fit it to the normal distribution theta.hat <- fit_normal(data)  # now we compute the bias, first using the asymptotic theory bias(theta.hat, theta) #>      mu     var  #>  0.0000 -0.0143 # now using the empirical sampling distribution expectation(theta.mc, function(x) x - theta) # mean(theta.mc) - theta #>       mu      var  #> -0.00109 -0.01245 N <- 1000 ns <- seq(10, 200, 10) bias_var <- numeric(length(ns)) j <- 1 for (n in ns) {     vars <- numeric(length(N))     for (i in 1:N) {         d <- rnorm(n = n, mean = mu, sd = sqrt(var))         fit <- fit_normal(d)         vars[i] <- params(fit)[2]     }     bias_var[j] <- mean(vars) - var     j <- j + 1 }"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"variance-covariance-matrix","dir":"Articles","previous_headings":"Bias","what":"Variance-covariance matrix","title":"Statistics and characteristics of the MLE","text":"variance-covariance matrix one important statistical measures estimator parameter vector. quantities variability individual parameter estimates co-vary . variance-covariance matrix parameter vector \\(\\theta = (\\theta_1, \\ldots, \\theta_p)'\\) \\(n \\times n\\) matrix defined \\[ \\operatorname{Var}(\\hat\\theta) = E_{\\hat\\theta}\\!\\bigl[(\\hat\\theta - E_{\\hat\\theta}(\\hat\\theta))     (\\hat\\theta - E_{\\hat\\theta}(\\hat\\theta))'\\bigr]. \\] \\((, j)\\)th element variance-covariance matrix covariance \\(\\)th \\(j\\)th elements parameter vector, respectively \\(\\theta_i\\) \\(\\theta_j\\). Thus, diagonal elements variance-covariance matrix variances individual parameter estimates, -diagonal elements covariances parameter estimates. look reasonably close, suggesting \\(n = 200\\), asymptotic sampling distribution good approximation “true” sampling distribution MLE.","code":"round(vcov(theta.hat), digits=3) #>       [,1]  [,2] #> [1,] 0.019 0.000 #> [2,] 0.000 0.052 round(vcov(theta.mc), digits=3) #>        mu   var #> mu  0.014 0.000 #> var 0.000 0.029"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"confidence-intervals","dir":"Articles","previous_headings":"Bias","what":"Confidence intervals","title":"Statistics and characteristics of the MLE","text":"can compute CI parameter using confint function: important measure accuracy estimator coverage probability, probability confidence interval parameter estimate contains true value parameter. coverage probability \\((1-\\alpha) \\%\\)-confidence interval \\(1-\\alpha\\), confidence interval said well-calibrated. coverage probability less \\(1-\\alpha\\), confidence interval said conservative; coverage probability greater \\(1-\\alpha\\), confidence interval said anti-conservative. can estimate simulating large number samples population distribution computing proportion times confidence interval contains true value parameter. can mean variance normal distribution.  see coverage probability close nominal coverage probability, converges sample size increases. suggests confidence intervals well-calibrated.","code":"confint(theta.hat) #>      2.5% 97.5% #> mu  0.533  1.09 #> var 0.892  1.80 N <- 1000 ns <- seq(10, 1000, 10) coverage_prob <- matrix(NA, nrow=length(ns), ncol=2) j <- 1 for (n in ns) {     count1 <- 0L     count2 <- 0L     for (i in 1:N) {         d <- rnorm(n = n, mean = mu, sd = sqrt(var))         fit <- fit_normal(d)         ci <- confint(fit)         if (ci[1, 1] <= mu && mu <= ci[1, 2]) {             count1 <- count1 + 1         }         if (ci[2, 1] <= var && var <= ci[2, 2]) {             count2 <- count2 + 1         }     }     coverage_prob[j, 1] <- count1 / N     coverage_prob[j, 2] <- count2 / N     j <- j + 1 }"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"mean-squared-error-matrix","dir":"Articles","previous_headings":"","what":"Mean squared error matrix","title":"Statistics and characteristics of the MLE","text":"mean squared error (MSE) estimator parameter vector \\(\\theta\\) defined \\[ \\operatorname{MSE}(\\hat\\theta) = E\\bigl[(\\hat\\theta - \\theta)(\\hat\\theta - \\theta)'\\bigr], \\] \\(\\hat\\theta - \\theta\\) column vector differences estimator true parameter \\((\\hat\\theta - \\theta)'\\) row vector differences, performing standard matrix multiplication two vectors. MSE measure average squared error estimator. function true parameter value \\(\\theta\\). MSE matrix. similar variance-covariance matrix, defined \\[ \\operatorname{Var}(\\hat\\theta) = E\\bigl[(\\hat\\theta - E(\\hat\\theta))     (\\hat\\theta - E(\\hat\\theta))'\\bigr], \\] replace true paramater \\(\\theta\\) expected value estimator \\(\\hat\\theta\\). estimator unbiased, \\(E(\\hat\\theta) = \\theta\\) \\(\\operatorname{Var}(\\hat\\theta) = \\operatorname{MSE}(\\hat\\theta)\\). need consider estimation error parameter individually, also errors might relate . instance, case overestimate one parameter, tend underestimate another. kind relationship errors estimating different parameters can captured -diagonal elements MSE matrix, represent covariances errors. diagonal elements MSE represent MSE individual parameter estimators, e.g., \\(\\)th diagonal element represents \\(\\operatorname{MSE}(\\hat\\theta_j)\\). trace MSE, sum diagonal elements, represents total MSE across parameters. single summary statistic, may useful comparing different estimators. MSE can decomposed two parts: bias, difference expected value estimator true parameter value, variance, variance estimator. MSE computed sum bias outer product variance-covariance matrix: \\[ \\operatorname{MSE}(\\hat\\theta) = \\operatorname{Bias}(\\hat\\theta)\\operatorname{Bias}(\\hat\\theta)'     + \\operatorname{Var}(\\hat\\theta). \\] ’s hard distinguish MSE matrices variance-covariance matrices reported previously, surprising, since bias relatively small MSE dominated variance. Let’s take closer look variance MSE mean \\(\\hat\\mu\\): close, since bias small. take MSE Monte Carlo simulation sort “true” MSE, since computed empirical sampling distribution MLE. expect sample size increases, asymptotic MSE (mse.hat) MC MSE (mse.mc) converge value. fact, let’s run little experiment show :  plots demonstrate asymptotic MSE good approximation “true” MSE, MSE computed empirical sampling distribution MLE. ’s difficult distinguish estimated asymptotic MSE, true parameter \\(\\theta\\) known, asymptotic MSE, true parameter \\(\\theta\\) known. bias small, MSE dominated variance.","code":"mse.hat <- mse(theta.hat, theta) mse.mc <- matrix(expectation(theta.mc,     function(x) (x - theta) %*% t(x - theta)), nrow = 2)  round(mse.hat, digits = 3) #>         mu   var #> [1,] 0.019 0.000 #> [2,] 0.000 0.052 round(mse.mc, digits = 3) #>       [,1]  [,2] #> [1,] 0.014 0.000 #> [2,] 0.000 0.029 # temporarily show more digits in the numbers/outputs for this code block options(digits = 12) # mse(mu) expectation(theta.mc, function(x) (x[1] - mu)^2) #> [1] 0.014176072516 # variance(mu) (mu.var <- expectation(theta.mc, function(x) (x[1] - mean(theta.mc)[1])^2)) #> [1] 0.0141748829208 b <- expectation(theta.mc, function(x) x[1] - mu) # mse = bias^2 + variance b^2 + mu.var #> [1] 0.014176072516 options(digits = 3) ns <- seq(10, 200, 10) mses.mc <- matrix(NA, nrow = length(ns), ncol = 2) mses.hat <- matrix(NA, nrow = length(ns), ncol = 2) mses.hat.hat <- matrix(NA, nrow = length(ns), ncol = 2) j <- 1 for (n in ns) {     theta.n <- empirical_dist(theta_samp_mc(n = n, theta = theta, B = B))     mse.mu.n <- expectation(theta.n, function(x) (x[1] - mu)^2)     mse.var.n <- expectation(theta.n, function(x) (x[2] - var)^2)     data <- rnorm(n = n, mean = mu, sd = sqrt(var))     fit <- fit_normal(data)     mses.mc[j, ] <- c(mse.mu.n, mse.var.n)     mses.hat[j, ] <- diag(mse(fit, theta))     mses.hat.hat[j, ] <- diag(mse(fit))     j <- j + 1 }"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"bootstrap-of-the-sampling-distribution-of-the-mle","dir":"Articles","previous_headings":"","what":"Bootstrap of the sampling distribution of the MLE","title":"Statistics and characteristics of the MLE","text":"Normally, don’t know true data generating process (DGP) data observe. sample data, want use sample estimate parameters model hopefully provides good fit DGP using maximum likelihood estimation. Earlier, simulated sample data normal distribution mean 1 variance 1 used MLE sample generate empirical sampling distribution MLE. called Monte Carlo simulation. However, can also use sample data generate empirical sampling distribution MLE. called bootstrap. idea sample sample true DGP, can use sample generate new samples (resample) fit MLE generate Bootstrapped empirical sampling distribution MLE. Let’s compute statistics: Let’s use Bootstrapped MLEs generate aproximation empirical sampling distribution: , let’s basic expectations Bootstrapped sampling distribution MLE compare previous results: bad. Let’s compute bias compare previous results: see bias function mle_boot bad. Note bias expectation w.r.t. sampling distribution MLE. general, can better estimator use \\[     \\hat\\theta^* = \\hat\\theta - \\operatorname{Bias}(\\hat\\theta), \\] assuming bias estimate accurate. particular example transformation makes worse, fine, bias transformed estimator less theory. Howevever, practice, don’t trust bias reported Bootstrap, except evidence estimator biased . analytic bias, bias.mle_normal, accurate, generally produce estimators less bias (although bias-variance trade-, may variance). Let’s compare variance-covariance matrix Bootstrapped sampling distribution MLE “true” sampling distribution asymptotic sampling distribution:","code":"# Simulate a sample of n observations from a normal with mean 1 and variance 2. library(boot) theta.boot <- mle_boot(boot(     data = data,     statistic = function(x, ind) {         params(fit_normal(x[ind]))     },     R = B)) params(theta.boot) #>    mu   var  #> 0.936 0.984 confint(theta.boot) #>      2.5% 97.5% #> mu  0.798  1.07 #> var 0.796  1.18 theta.b <- empirical_dist(theta.boot$t) # should sum to 1 expectation(theta.b, function(x) 1) #> [1] 1 # mean (mu.b <- mean(theta.b)) #> [1] 0.937 0.978 # variance of (mu, var) expectation(theta.b, function(x) (x - mu.b)^2) #> [1] 0.00488 0.00973 # kurtosis of (mu, var)  expectation(theta.b, function(x) (x - mu.b)^4) /     expectation(theta.b, function(x) (x - mu.b)^2)^2 #> [1] 2.98 3.10 # skewness of mu and var -- should be (0, 0) expectation(theta.b, function(x) ((x - mu.b) / theta)^3) #> [1] -0.00000665  0.00020805 # covariance of (mu, var) -- should be around 0 expectation(theta.b, function(x) (x[1] - mu.b[1]) * (x[2] - mu.b[2])) #> [1] 0.000151 bias(theta.boot) #>       mu      var  #>  0.00104 -0.00556 expectation(theta.mc, function(x) x - theta) #>       mu      var  #> -0.00109 -0.01245 bias(theta.hat, theta) #>      mu     var  #>  0.0000 -0.0143 round(vcov(theta.b), digits = 3) #>       [,1] [,2] #> [1,] 0.005 0.00 #> [2,] 0.000 0.01 round(vcov(theta.mc), digits = 3) #>        mu   var #> mu  0.014 0.000 #> var 0.000 0.029 round(vcov(theta.hat), digits = 3) #>       [,1]  [,2] #> [1,] 0.019 0.000 #> [2,] 0.000 0.052 N <- 100 ns <- seq(20, 140, 20) coverage_prob <- matrix(NA, nrow=length(ns), ncol=2) j <- 1 for (n in ns) {     count1 <- 0L     count2 <- 0L     for (i in 1:N) {         d <- rnorm(n = n, mean = mu, sd = sqrt(var))         fit.boot <- mle_boot(boot(             data = d,             statistic = function(x, ind) {                 params(fit_normal(x[ind]))             },             R = 250))         ci <- confint(fit.boot)         if (ci[1, 1] <= mu && mu <= ci[1, 2]) {             count1 <- count1 + 1         }         if (ci[2, 1] <= var && var <= ci[2, 2]) {             count2 <- count2 + 1         }     }     coverage_prob[j, 1] <- count1 / N     coverage_prob[j, 2] <- count2 / N     #cat(\"n = \", n, \", coverage = \", coverage_prob[j, ], \"\\n\")     j <- j + 1 }"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"prediction-intervals","dir":"Articles","previous_headings":"","what":"Prediction intervals","title":"Statistics and characteristics of the MLE","text":"Frequently, actually interested predicting outcome random variable (vector) estimating parameters . observed sample \\(\\mathcal{D} = \\{X_i\\}_{=1}^n\\) \\(X_i \\sim \\operatorname{Normal}(\\mu, \\sigma)\\), \\(\\theta = (\\mu, \\sigma)\\) known. estimate \\(\\theta\\), solved MLE , asymptotically, normally distributed mean \\(\\theta\\) variance-covariance given inverse FIM (, using Bootstrap, estimating covariance sampling distribution Bootstrapped MLEs). wish model uncertainty new observation, \\(\\hat{X}_{n+1}|\\mathcal{D}\\). considering uncertainty inherent Normal distribution uncertainty estimate \\(\\hat\\theta\\). particular, let \\(\\hat{X}_{n+1}|\\hat\\theta \\sim \\operatorname{Normal}(\\hat\\theta)\\) \\(\\hat\\theta \\sim \\operatorname{MVN}(\\theta,^{-1}(\\theta)/n)\\). , joint distribution \\(\\hat{X}_{n+1}\\) \\(\\hat\\theta\\) pdf given \\[     f(t,\\theta) = f_{\\hat{X}|\\hat\\theta}(x|\\theta) f_{\\hat\\theta}(\\theta), \\] thus find \\(f(t)\\), marginalize \\(\\theta\\), obtaining \\[     f(x) = \\int_{R^2} f_{\\hat{X}_{n+1},\\hat\\theta}(x,\\theta) d\\theta. \\] Given information sample, uncertainty new observation characterized distribution \\[     \\hat{X}_{n+1} \\sim f(x). \\] greater variance \\(X_{n+1}|\\hat\\theta\\) , stated earlier, know \\(\\theta\\), uncertain estimate \\(\\hat\\theta\\). pred, compute predictive interval (PI) distribution \\(\\hat{X}_{n+1}\\) using Monte Carlo integration, .e., sum large number draws joint distribution \\(\\hat{X}_{n+1}\\) \\(\\hat\\theta\\) compute empirical quantiles. function pred takes arguments x, case mle object, sampler distribution random variable interest, case rnorm (sampler normal distribution). sampler must compatible parameter value x (.e., params(x)). compute PI \\(\\hat{X}_{n+1}\\): compare \\(X_{n+1}|\\hat\\theta\\)? see 95% quantile interval \\(X_{n+1}|\\hat\\theta\\) bit smaller \\(\\hat{X}_{n+1}\\), expected. course, sufficiently large sample sizes, converge quantiles.","code":"samp <- function(n, par) rnorm(n = n, mean = par[1], sd = sqrt(par[2])) pred(x = theta.hat, samp = samp) #>       mean lower upper #> [1,] 0.803 -1.47  3.09 par <- params(theta.hat) mu.hat <- par[1] var.hat <- par[2] c(mu.hat, qnorm(c(.025,.975), mean = mu.hat, sd = sqrt(var.hat))) #>     mu                #>  0.809 -1.464  3.083"},{"path":"https://queelius.github.io/algebraic.mle/articles/statistics.html","id":"weighted-mle-a-weighted-sum-of-maximum-likelihood-estimators","dir":"Articles","previous_headings":"","what":"Weighted MLE: a weighted sum of maximum likelihood estimators","title":"Statistics and characteristics of the MLE","text":"Since variance-covariance MLE inversely proportional FIM MLE defined respect , can combine multiple MLEs \\(\\theta\\), may defined respect different kind sample, arrive MLE incorporates Fisher information samples. Consider \\(k\\) mutually independent MLEs parameter \\(\\theta\\), \\(\\hat\\theta_1,\\ldots,\\hat\\theta_k\\), \\(\\hat\\theta_j \\sim N(\\theta,I_j^{-1}(\\theta))\\). , sampling MLE \\(\\theta\\) incorporates data \\(\\hat\\theta_1,\\ldots,\\hat\\theta_k\\) given inverse-variance weighted mean, \\[     \\hat\\theta_w = \\left(\\sum_{j=1}^k I_j(\\theta)\\right)^{-1} \\left(\\sum_{j=1}^k I_j(\\theta) \\hat\\theta_j\\right), \\] , asymptotically, expected value \\(\\theta\\) variance-covariance \\(\\left(\\sum_{j=1}^k I_j(\\theta)\\right)^{-1}\\). evaluate performance weighted MLE, generate sample \\(N=1000\\) observations \\(\\mathcal{N}(\\theta)\\) compute MLE observed sample, denoted \\(\\hat\\theta\\). divide observed sample \\(r=5\\) sub-samples, size \\(N/r=100\\), compute MLE sub-sampled, denoted \\(\\theta^{(1)},\\ldots,\\theta^{(r)}\\). Finally, weighted combination MLEs form weighted MLE, denoted \\(\\theta_w\\): show results following R code. First, show weighted MLE MSE: MLE total sample MSE : Unfortuantely, \\(\\hat\\theta\\) much better estimator \\(\\theta\\) \\(\\hat\\theta_w\\). According theory, identical, practice, may issues like numerical instability cause weighted MLE perform poorly. fact using numerical differentiation compute FIM, may source error. can try improve accuracy FIM using accurate method computing FIM, analytical solution accurate numerical approximation.","code":"N <- 100 r <- 5 samp <- rnorm(N, mean = theta[1], sd = sqrt(theta[2])) samp.sub <- matrix(samp, nrow = r) mles.sub <- list(length = r) for (i in 1:r)     mles.sub[[i]] <- fit_normal(samp.sub[i,])  mle.wt <- mle_weighted(mles.sub) mle <- fit_normal(samp) params(mle.wt) #> [1] 0.892 0.624 vcov(mle.wt) #>                    [,1]               [,2] #> [1,] 0.0071944135025693 0.0000000000000243 #> [2,] 0.0000000000000243 0.0089815176185350 params(mle) #>    mu   var  #> 0.956 0.860 vcov(mle) #>                    [,1]               [,2] #> [1,] 0.0085950404213935 0.0000000000000141 #> [2,] 0.0000000000000141 0.0147749439691487"},{"path":"https://queelius.github.io/algebraic.mle/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Towell. Author, maintainer.","code":""},{"path":"https://queelius.github.io/algebraic.mle/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Towell (2023). algebraic.mle: Algebraic Maximum Likelihood Estimators. https://github.com/queelius/algebraic.mle, https://queelius.github.io/algebraic.mle/.","code":"@Manual{,   title = {algebraic.mle: Algebraic Maximum Likelihood Estimators},   author = {Alexander Towell},   year = {2023},   note = {https://github.com/queelius/algebraic.mle, https://queelius.github.io/algebraic.mle/}, }"},{"path":"https://queelius.github.io/algebraic.mle/index.html","id":"r-package-algebraicmle","dir":"","previous_headings":"","what":"Algebraic Maximum Likelihood Estimators","title":"Algebraic Maximum Likelihood Estimators","text":"algebraic.mle R package provides algebra Maximum Likelihood Estimators (MLEs). estimators possess many desirable, well-defined statistical properties package helps manipulate utilize.","code":""},{"path":"https://queelius.github.io/algebraic.mle/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Algebraic Maximum Likelihood Estimators","text":"algebraic.mle can installed GitHub using devtools package R:","code":"install.packages(\"devtools\") devtools::install_github(\"queelius/algebraic.mle\")"},{"path":"https://queelius.github.io/algebraic.mle/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Algebraic Maximum Likelihood Estimators","text":"primary focus package likelihood log-likelihood, fundamental statistical concepts parametric model. integral Bayesian frequentist statistics, well prioritize likelihood. algebraic.mle package enables easy handling MLEs, , certain conditions assumptions (independence identical distribution (iid) sample), present numerous advantages, including asymptotic normality uniformly minimum variance unbiased estimator theta.","code":""},{"path":"https://queelius.github.io/algebraic.mle/index.html","id":"api-overview","dir":"","previous_headings":"","what":"API Overview","title":"Algebraic Maximum Likelihood Estimators","text":"main object algebraic.mle package mle object, represents fitted model. package provides number generic methods designed mle objects. comprehensive list functions available function reference algebraic.mle.","code":""},{"path":"https://queelius.github.io/algebraic.mle/index.html","id":"fitting-exponential-models","dir":"","previous_headings":"","what":"Fitting exponential models","title":"Algebraic Maximum Likelihood Estimators","text":"example fitting conditional exponential model data using algebraic.mle. true DGP given Y | x ~ X(x) + W$ X(x) ~ EXP(rate(x)), W ~ N(0, 1e-3), rate(x) = exp(b0 + b1 * x). analysis, care x distributed, take observable exogenous variable. interested conditional distribution Y | x. Let’s fit conditional exponential model data DGP. true DGP bit complicated, salient part exponential component, gaussian term may thought added noise, say, imprecise measurement. course, true DGP unknown practice, arriving conditional exponential model matter judgement domain knowledge. model, Y | x ~ EXP(rate(x)) rate(x) = exp(b0 + b1*x). First, let’s define DGP (data generating process): Let’s generate date: Now, define two functions, resp, rate, loglik function used define model. Let’s fit model. ’ll use optim function stats fit model wrap mle object using mle_numerical. Let’s plot :","code":"b0 <- -.1 b1 <- 0.5  dgp <- function(n, x) {     rate <- exp(b0 + b1 * x)     X <- rexp(n, rate)     W <- rnorm(n, 0, 1e-3)     return(X + W) } n <- 75 # number of observations set.seed(1231) # for reproducibility df <- data.frame(x = rep(NA, n), y = rep(NA, n)) for (i in 1:n) {     x <- runif(1, -10, 10)     y <- dgp(n = 1, x = x)     df[i, ] <- c(x, y) } resp <- function(df) df$y rate <- function(df, beta) exp(beta[1] + beta[2] * df$x) loglik <- function(df, resp, rate) {   function(beta) sum(dexp(x = resp(df), rate = rate(df, beta), log = TRUE)) } library(algebraic.mle)  # initial guess for the parameters par0 <- c(0, 0) names(par0) <- c(\"b0\", \"b1\")  sol <- mle_numerical(optim(par = par0,     fn = loglik(df, resp, rate),     control = list(fnscale = -1),     hessian = TRUE)) summary(sol) #> Maximum likelihood estimator of type mle_numerical is normally distributed. #> The estimates of the parameters are given by: #>         b0         b1  #> -0.2253626  0.4560893  #> The standard error is  0.1167634 0.02145606 . #> The asymptotic 95% confidence interval of the parameters are given by: #>          2.5%       97.5% #> b0 -0.4174213 -0.03330395 #> b1  0.4207972  0.49138139 #> The MSE of the estimator is  0.01409405 . #> The log-likelihood is  -119.6977 . #> The AIC is  243.3954 . # plot the x-y points from the data frame plot(df$x,df$y)  # now overlay a plot of the conditional mean x <- seq(-10, 10, .1) b0.hat <- params(sol)[1] b1.hat <- params(sol)[2] y.hat <- 1/exp(b0.hat + b1.hat*x) y <- 1/exp(b0 + b1*x) lines(x, y, col = \"green\", lwd = 10) lines(x, y.hat, col = \"blue\", lwd = 10)"},{"path":"https://queelius.github.io/algebraic.mle/index.html","id":"hypothesis-test-and-model-selection","dir":"","previous_headings":"Fitting exponential models","what":"Hypothesis test and model selection","title":"Algebraic Maximum Likelihood Estimators","text":"Let’s test hypothesis b0 = 0 using likelihood ratio test. can use LRT null model special case (nested) full model. null model Y | x ~ EXP(rate(x)) rate(x) = exp(b1*x), full model Y | x ~ EXP(rate(x)) rate(x) = exp(b0 + b1*x). Let’s compute likelihood ratio test statistic p-value: see p < 0.05, just barely, say data compatible null hypothesis b0 = 0. wanted model selection, use AIC: AIC measure, since full model AIC less null model, choose full model. actually know DGP models reasonable approximations, full model closer approximation. “models wrong, useful.” - George Box Eventually, sufficiently large sample, model DGP can discarded, reality complex never large enough sample never able come model exactly DGP. Let’s another test, b1 = 0, .e., ’s unconditional exponential model, just standard exponential distribution. p-value essentially zero, reject null hypothesis b1 = 0. Let’s compare confidence intervals models. see 95% confidence interval b0 include zero, reject null hypothesis b0 = 0. 95% confidence interval b1 include zero, reject null hypothesis b1 = 0. can see tutorials examples using package vignettes.","code":"# construct null model where b1 = 0 rate_b0_zero <- function(df, b1) exp(b1 * df$x)  # initial guess for the parameters # fit the model under the null hypothesis sol2 <- mle_numerical(optim(par = 0,     fn = loglik(df, resp, rate_b0_zero),     control = list(fnscale = -1),     hessian = TRUE,     method = \"BFGS\")) summary(sol2) #> Maximum likelihood estimator of type mle_numerical is normally distributed. #> The estimates of the parameters are given by: #> [1] 0.4617093 #> The standard error is  0.01899941 . #> The asymptotic 95% confidence interval of the parameters are given by: #>             2.5%     97.5% #> param1 0.4304581 0.4929605 #> The MSE of the estimator is  0.0003609774 . #> The log-likelihood is  -121.7164 . #> The AIC is  245.4328 . (lrt.sol2 <- -2 * (loglik_val(sol2) - loglik_val(sol))) #> [1] 4.037435 pchisq(lrt.sol2, df = 1, lower.tail = FALSE) # compute the p-value #> [1] 0.04450142 aic(sol) #> [1] 243.3954 aic(sol2) #> [1] 245.4328 rate_b1_zero <- function(df, b0) exp(b0) # fit the model under the null hypothesis sol3 <- mle_numerical(optim(par = 0,     fn = loglik(df, resp, rate_b1_zero),     control = list(fnscale = -1),     hessian = TRUE,     method = \"BFGS\")) (lrt.sol3 <- -2 * (loglik_val(sol3) - loglik_val(sol))) #> [1] 285.0265 pchisq(lrt.sol3, df = 1, lower.tail = FALSE) # compute the p-value #> [1] 6.029289e-64 CI <- confint(sol) # print the confidence interval print(CI) #>          2.5%       97.5% #> b0 -0.4174213 -0.03330395 #> b1  0.4207972  0.49138139"},{"path":"https://queelius.github.io/algebraic.mle/reference/aic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for obtaining the AIC of a fitted distribution object fit. — aic","title":"Generic method for obtaining the AIC of a fitted distribution object fit. — aic","text":"Generic method obtaining AIC fitted distribution object fit.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/aic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for obtaining the AIC of a fitted distribution object fit. — aic","text":"","code":"aic(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/aic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for obtaining the AIC of a fitted distribution object fit. — aic","text":"x object obtain AIC ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/aic.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the AIC of an `mle` object. — aic.mle","title":"Method for obtaining the AIC of an `mle` object. — aic.mle","text":"Method obtaining AIC `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/aic.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the AIC of an `mle` object. — aic.mle","text":"","code":"# S3 method for mle aic(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/aic.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the AIC of an `mle` object. — aic.mle","text":"x `mle` object obtain AIC ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/algebraic.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"`algebraic.mle`: A package for algebraically operating on and generating\nmaximum likelihood estimators from existing maximum likelihood estimators. — algebraic.mle","title":"`algebraic.mle`: A package for algebraically operating on and generating\nmaximum likelihood estimators from existing maximum likelihood estimators. — algebraic.mle","text":"object representing fitted model type `mle` object, maximum likelihood estimator model respect observed data.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/algebraic.mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"`algebraic.mle`: A package for algebraically operating on and generating\nmaximum likelihood estimators from existing maximum likelihood estimators. — algebraic.mle","text":"relatively rich API working objects help understand MLE estimator.#'","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the bias of an estimator object. — bias","title":"Computes the bias of an estimator object. — bias","text":"Computes bias estimator object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the bias of an estimator object. — bias","text":"","code":"bias(x, theta, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the bias of an estimator object. — bias","text":"x object compute bias . theta true parameter value. usually, unknown (NULL), case estimate bias ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the bias of an estimator object. — bias","text":"bias estimator. return type depends specific         method.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the bias of an `mle` object assuming the large sample\napproximation is valid and the MLE regularity conditions are satisfied.\nIn this case, the bias is zero (or zero vector). — bias.mle","title":"Computes the bias of an `mle` object assuming the large sample\napproximation is valid and the MLE regularity conditions are satisfied.\nIn this case, the bias is zero (or zero vector). — bias.mle","text":"good estimate bias general, arguably better returning `NULL`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the bias of an `mle` object assuming the large sample\napproximation is valid and the MLE regularity conditions are satisfied.\nIn this case, the bias is zero (or zero vector). — bias.mle","text":"","code":"# S3 method for mle bias(x, theta = NULL, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the bias of an `mle` object assuming the large sample\napproximation is valid and the MLE regularity conditions are satisfied.\nIn this case, the bias is zero (or zero vector). — bias.mle","text":"x `mle` object compute bias . theta true parameter value. normally, unknown (NULL), case estimate bias (say, using bootstrap) ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the estimate of the bias of a `mle_boot` object. — bias.mle_boot","title":"Computes the estimate of the bias of a `mle_boot` object. — bias.mle_boot","text":"Generally, trust good estimate bias MLE estimator, still useful comparing different estimators.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the estimate of the bias of a `mle_boot` object. — bias.mle_boot","text":"","code":"# S3 method for mle_boot bias(x, par = NULL, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/bias.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the estimate of the bias of a `mle_boot` object. — bias.mle_boot","text":"x `mle_boot` object compute bias . par `mle_boot`, ignore parameter. ... pass additional arguments (used)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/confint.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute the confidence intervals of `mle` objects. — confint.mle","title":"Function to compute the confidence intervals of `mle` objects. — confint.mle","text":"Function compute confidence intervals `mle` objects.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/confint.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute the confidence intervals of `mle` objects. — confint.mle","text":"","code":"# S3 method for mle confint(object, parm = NULL, level = 0.95, use_t_dist = TRUE, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/confint.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute the confidence intervals of `mle` objects. — confint.mle","text":"object `mle` object compute confidence intervals parm parameters compute confidence intervals (used) level confidence level, defaults 0.95 (alpha=.05) ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/confint.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtained the confidence interval of an `mle_boot` object. — confint.mle_boot","title":"Method for obtained the confidence interval of an `mle_boot` object. — confint.mle_boot","text":"Method obtained confidence interval `mle_boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/confint.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtained the confidence interval of an `mle_boot` object. — confint.mle_boot","text":"","code":"# S3 method for mle_boot confint(   object,   parm = NULL,   level = 0.95,   type = c(\"norm\", \"basic\", \"perc\", \"bca\"),   ... )"},{"path":"https://queelius.github.io/algebraic.mle/reference/confint.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtained the confidence interval of an `mle_boot` object. — confint.mle_boot","text":"object `mle_boot` object obtain confidence interval parm parameter obtain confidence interval (used) level confidence level ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/confint_from_sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute the confidence intervals from a variance-covariance matrix — confint_from_sigma","title":"Function to compute the confidence intervals from a variance-covariance matrix — confint_from_sigma","text":"Function compute confidence intervals variance-covariance matrix","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/confint_from_sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute the confidence intervals from a variance-covariance matrix — confint_from_sigma","text":"","code":"confint_from_sigma(sigma, theta, level = 0.95)"},{"path":"https://queelius.github.io/algebraic.mle/reference/confint_from_sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute the confidence intervals from a variance-covariance matrix — confint_from_sigma","text":"sigma either variance-covariance matrix vector variances parameter estimator theta point estimate level confidence level, defaults 0.95 (alpha=.05) ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/is_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if an object `x` is an `mle` object. — is_mle","title":"Determine if an object `x` is an `mle` object. — is_mle","text":"Determine object `x` `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/is_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if an object `x` is an `mle` object. — is_mle","text":"","code":"is_mle(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/is_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if an object `x` is an `mle` object. — is_mle","text":"x object test","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/is_mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if an object is an `mle_boot` object. — is_mle_boot","title":"Determine if an object is an `mle_boot` object. — is_mle_boot","text":"Determine object `mle_boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/is_mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if an object is an `mle_boot` object. — is_mle_boot","text":"","code":"is_mle_boot(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/is_mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if an object is an `mle_boot` object. — is_mle_boot","text":"x object test","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for obtaining the log-likelihood value of a fitted MLE\nobject. — loglik_val","title":"Generic method for obtaining the log-likelihood value of a fitted MLE\nobject. — loglik_val","text":"Generic method obtaining log-likelihood value fitted MLE object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for obtaining the log-likelihood value of a fitted MLE\nobject. — loglik_val","text":"","code":"loglik_val(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for obtaining the log-likelihood value of a fitted MLE\nobject. — loglik_val","text":"x object obtain log-likelihood ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the log-likelihood of an `mle` object. — loglik_val.mle","title":"Method for obtaining the log-likelihood of an `mle` object. — loglik_val.mle","text":"Method obtaining log-likelihood `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the log-likelihood of an `mle` object. — loglik_val.mle","text":"","code":"# S3 method for mle loglik_val(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the log-likelihood of an `mle` object. — loglik_val.mle","text":"x log-likelihood `l` evaluated `x`, `l(x)`. ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/loglik_val.mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for obtaining the log-likelihood of an `mle` object. — loglik_val.mle","text":"log-likelihood fitted mle object `x`","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for making `mle` objects, which provides a common interface\nfor maximum likelihood estimators. — mle","title":"Constructor for making `mle` objects, which provides a common interface\nfor maximum likelihood estimators. — mle","text":"Constructor making `mle` objects, provides common interface maximum likelihood estimators.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for making `mle` objects, which provides a common interface\nfor maximum likelihood estimators. — mle","text":"","code":"mle(   theta.hat,   loglike = NULL,   score = NULL,   sigma = NULL,   info = NULL,   obs = NULL,   nobs = NULL,   superclasses = NULL )"},{"path":"https://queelius.github.io/algebraic.mle/reference/mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for making `mle` objects, which provides a common interface\nfor maximum likelihood estimators. — mle","text":"theta.hat MLE loglike log-likelihood `theta.hat` given data score score function evaluated `theta.hat` sigma variance-covariance matrix `theta.hat` given data info information matrix `theta.hat` given data obs observation (sample) data nobs number observations `obs` superclasses class (classes) `mle` base","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped MLE — mle_boot","title":"Bootstrapped MLE — mle_boot","text":"Sometimes, large sample asymptotic theory MLEs applicable. cases, can use bootstrap estimate sampling distribution MLE.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped MLE — mle_boot","text":"","code":"mle_boot(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped MLE — mle_boot","text":"x `boot` return value","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped MLE — mle_boot","text":"`mle_boot` object (wrapper `boot` object)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapped MLE — mle_boot","text":"takes approach similiar `mle_numerical` object, wrapper `stats::optim` return value, something compatible `optim` return value. , take `boot` object, sampling distribution MLE, wrap `mle_boot` object provide number methods `mle_boot` object satisfies concept `mle` object. Look `boot` package information bootstrap.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_numerical.html","id":null,"dir":"Reference","previous_headings":"","what":"This function takes the output of `optim`, `newton_raphson`, or `sim_anneal`\nand turns it into an `mle_numerical` (subclass of `mle`) object. — mle_numerical","title":"This function takes the output of `optim`, `newton_raphson`, or `sim_anneal`\nand turns it into an `mle_numerical` (subclass of `mle`) object. — mle_numerical","text":"function takes output `optim`, `newton_raphson`, `sim_anneal` turns `mle_numerical` (subclass `mle`) object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_numerical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function takes the output of `optim`, `newton_raphson`, or `sim_anneal`\nand turns it into an `mle_numerical` (subclass of `mle`) object. — mle_numerical","text":"","code":"mle_numerical(sol, options = list(), superclasses = NULL)"},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_numerical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function takes the output of `optim`, `newton_raphson`, or `sim_anneal`\nand turns it into an `mle_numerical` (subclass of `mle`) object. — mle_numerical","text":"sol output `optim` `newton_raphson` options list, options things like sigma FIM","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_numerical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function takes the output of `optim`, `newton_raphson`, or `sim_anneal`\nand turns it into an `mle_numerical` (subclass of `mle`) object. — mle_numerical","text":"`numerical_mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Accepts a list of `mle` objects for some parameter, say `theta`,\nand combines them into a single estimator `mle_weighted`. — mle_weighted","title":"Accepts a list of `mle` objects for some parameter, say `theta`,\nand combines them into a single estimator `mle_weighted`. — mle_weighted","text":"combines `mle` objects adding together, weighted inverse respective variance-covariance matrix (information matrix). Intuitively, higher variance, less weight `mle` given summation, alternatively, information parameter, weight given summation.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accepts a list of `mle` objects for some parameter, say `theta`,\nand combines them into a single estimator `mle_weighted`. — mle_weighted","text":"","code":"mle_weighted(mles)"},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accepts a list of `mle` objects for some parameter, say `theta`,\nand combines them into a single estimator `mle_weighted`. — mle_weighted","text":"mles list `mle` objects, parameter.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accepts a list of `mle` objects for some parameter, say `theta`,\nand combines them into a single estimator `mle_weighted`. — mle_weighted","text":"object type `mle_weighted` (inherits         `mle`) weighted sum `mle` objects.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mle_weighted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accepts a list of `mle` objects for some parameter, say `theta`,\nand combines them into a single estimator `mle_weighted`. — mle_weighted","text":"`mle` object `observed_fim` method, returns Fisher information matrix (FIM) parameter. FIM assumed negative expected value Hessian log-likelihood function. `mle` objects also `params` method, returns parameter vector. assume observations used estimate MLE objects `mles` independent.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function for obtaining the mean squared error (MSE) of an estimator,\n`mse(x) = E[(x-mu)^2]` where `mu` is the true parameter value. — mse","title":"Generic function for obtaining the mean squared error (MSE) of an estimator,\n`mse(x) = E[(x-mu)^2]` where `mu` is the true parameter value. — mse","text":"Generic function obtaining mean squared error (MSE) estimator, `mse(x) = E[(x-mu)^2]` `mu` true parameter value.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function for obtaining the mean squared error (MSE) of an estimator,\n`mse(x) = E[(x-mu)^2]` where `mu` is the true parameter value. — mse","text":"","code":"mse(x, theta)"},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function for obtaining the mean squared error (MSE) of an estimator,\n`mse(x) = E[(x-mu)^2]` where `mu` is the true parameter value. — mse","text":"x object compute MSE theta true parameter value","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the MSE of an `mle` object. — mse.mle","title":"Computes the MSE of an `mle` object. — mse.mle","text":"MSE estimator just expected sum squared differences, e.g., true parameter value `x` estimator `x.hat`, MSE ```     mse(x.hat) = E[(x.hat-x)                        vcov(x.hat) + bias(x.hat, x)  ```","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the MSE of an `mle` object. — mse.mle","text":"","code":"# S3 method for mle mse(x, theta = NULL)"},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the MSE of an `mle` object. — mse.mle","text":"x `mle` object compute MSE . theta true parameter value, defaults `NULL` unknown. `NULL`, let bias method deal . Maybe nice way estimating bias.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the MSE of an `mle` object. — mse.mle","text":"Since `x` typically known, normally must estimate bias. Asymptotically, assuming regularity conditions, bias MLE zero, can estimate MSE `mse(x.hat) = vcov(x.hat)`, small samples, generally case. can estimate bias, can replace bias estimate bias. Sometimes, can estimate bias analytically, , can use something like bootstrap. example, sample size `n`, can bootstrap bias sampling `n` observations replacement, computing MLE, computing difference bootstrapped MLE MLE. can repeat process `B` times, average differences get estimate bias.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the estimate of the MSE of a `boot` object. — mse.mle_boot","title":"Computes the estimate of the MSE of a `boot` object. — mse.mle_boot","text":"Computes estimate MSE `boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the estimate of the MSE of a `boot` object. — mse.mle_boot","text":"","code":"# S3 method for mle_boot mse(x, par = NULL, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/mse.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the estimate of the MSE of a `boot` object. — mse.mle_boot","text":"x `boot` object compute MSE . par true parameter value known, may provide ; otherwise use MLE `par`. ... pass additional arguments (used)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nobs.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle","title":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle","text":"Method obtaining number observations sample used `mle`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nobs.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle","text":"","code":"# S3 method for mle nobs(object, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/nobs.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle","text":"object `mle` object obtain number observations ... additional arguments pass (used)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nobs.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle_boot","title":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle_boot","text":"Method obtaining number observations sample used `mle`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nobs.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle_boot","text":"","code":"# S3 method for mle_boot nobs(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/nobs.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the number of observations in the sample used by\nan `mle`. — nobs.mle_boot","text":"x `mle` object obtain number observations ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nparams.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the number of parameters of an `mle` object. — nparams.mle","title":"Method for obtaining the number of parameters of an `mle` object. — nparams.mle","text":"Method obtaining number parameters `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nparams.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the number of parameters of an `mle` object. — nparams.mle","text":"","code":"# S3 method for mle nparams(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/nparams.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the number of parameters of an `mle` object. — nparams.mle","text":"x `mle` object obtain number parameters ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nparams.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the number of parameters of an `boot` object. — nparams.mle_boot","title":"Method for obtaining the number of parameters of an `boot` object. — nparams.mle_boot","text":"Method obtaining number parameters `boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/nparams.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the number of parameters of an `boot` object. — nparams.mle_boot","text":"","code":"# S3 method for mle_boot nparams(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/nparams.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the number of parameters of an `boot` object. — nparams.mle_boot","text":"x `boot` object obtain number parameters ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/obs.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the observations used by the `mle` object `x`. — obs.mle","title":"Method for obtaining the observations used by the `mle` object `x`. — obs.mle","text":"Method obtaining observations used `mle` object `x`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/obs.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the observations used by the `mle` object `x`. — obs.mle","text":"","code":"obs.mle(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/obs.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the observations used by the `mle` object `x`. — obs.mle","text":"x `mle` object obtain number observations ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/obs.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the observations used by the `mle`. — obs.mle_boot","title":"Method for obtaining the observations used by the `mle`. — obs.mle_boot","text":"Method obtaining observations used `mle`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/obs.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the observations used by the `mle`. — obs.mle_boot","text":"","code":"obs.mle_boot(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/obs.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the observations used by the `mle`. — obs.mle_boot","text":"x `mle` object obtain number observations ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for obtaining the observed FIM\nmatrix of an `mle` object. — observed_fim","title":"Generic method for obtaining the observed FIM\nmatrix of an `mle` object. — observed_fim","text":"Fisher information way measuring amount information observable random variable `X` carries unknown parameter `theta` upon probability `X` depends.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for obtaining the observed FIM\nmatrix of an `mle` object. — observed_fim","text":"","code":"observed_fim(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for obtaining the observed FIM\nmatrix of an `mle` object. — observed_fim","text":"x object obtain fisher information ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic method for obtaining the observed FIM\nmatrix of an `mle` object. — observed_fim","text":"inverse Fisher information matrix variance-covariance MLE `theta`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for obtaining the observed FIM of an `mle` object. — observed_fim.mle","title":"Function for obtaining the observed FIM of an `mle` object. — observed_fim.mle","text":"Function obtaining observed FIM `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for obtaining the observed FIM of an `mle` object. — observed_fim.mle","text":"","code":"# S3 method for mle observed_fim(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/observed_fim.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for obtaining the observed FIM of an `mle` object. — observed_fim.mle","text":"x `mle` object obtain FIM . ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/orthogonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for determining the orthogonal parameters of an estimator. — orthogonal","title":"Method for determining the orthogonal parameters of an estimator. — orthogonal","text":"Method determining orthogonal parameters estimator.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/orthogonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for determining the orthogonal parameters of an estimator. — orthogonal","text":"","code":"orthogonal(x, tol, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/orthogonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for determining the orthogonal parameters of an estimator. — orthogonal","text":"x estimator tol tolerance determining number close enough zero ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/orthogonal.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for determining the orthogonal components of an `mle` object\n`x`. — orthogonal.mle","title":"Method for determining the orthogonal components of an `mle` object\n`x`. — orthogonal.mle","text":"Method determining orthogonal components `mle` object `x`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/orthogonal.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for determining the orthogonal components of an `mle` object\n`x`. — orthogonal.mle","text":"","code":"# S3 method for mle orthogonal(x, tol = sqrt(.Machine$double.eps), ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/orthogonal.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for determining the orthogonal components of an `mle` object\n`x`. — orthogonal.mle","text":"x `mle` object tol tolerance determining number close enough zero ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/params.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the parameters of an `mle` object. — params.mle","title":"Method for obtaining the parameters of an `mle` object. — params.mle","text":"Method obtaining parameters `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/params.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the parameters of an `mle` object. — params.mle","text":"","code":"# S3 method for mle params(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/params.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the parameters of an `mle` object. — params.mle","text":"x `mle` object obtain parameters ","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/params.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the parameters of an `boot` object. — params.mle_boot","title":"Method for obtaining the parameters of an `boot` object. — params.mle_boot","text":"Method obtaining parameters `boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/params.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the parameters of an `boot` object. — params.mle_boot","text":"","code":"# S3 method for mle_boot params(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/params.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the parameters of an `boot` object. — params.mle_boot","text":"x `boot` object obtain parameters .","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the predictive confidence interval given an estimator object `x`. — pred","title":"Compute the predictive confidence interval given an estimator object `x`. — pred","text":"Compute predictive confidence interval given estimator object `x`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the predictive confidence interval given an estimator object `x`. — pred","text":"","code":"pred(x, samp = NULL, alpha = 0.05, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the predictive confidence interval given an estimator object `x`. — pred","text":"x estimator object samp sampler random variable parameterized mle `x` alpha (1-alpha)/2 confidence interval ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate of predictive interval of `T|data` using Monte Carlo integration. — pred.mle","title":"Estimate of predictive interval of `T|data` using Monte Carlo integration. — pred.mle","text":"Let   `T|x ~ f(t|x)`` pdf vector `T` given MLE `x`   `x ~ MVN(params(x),vcov(x))`` estimate sampling distribution MLE parameters `T`. ,   `(T,x) ~ f(t,x) = f(t|x) f(x) joint distribution `(T,x)`. find `f(t)` fixed `t`, integrate `f(t,x)` `x` using Monte Carlo integration find marginal distribution `T`. , :","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate of predictive interval of `T|data` using Monte Carlo integration. — pred.mle","text":"","code":"# S3 method for mle pred(x, samp, alpha = 0.05, R = 50000, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate of predictive interval of `T|data` using Monte Carlo integration. — pred.mle","text":"x `mle` object. samp sampler distribution parameterized MLE `x`, .e., `T|x`. alpha (1-alpha)-predictive interval `T|x`. Defaults 0.05. R number samples draw sampling distribution `x`. Defaults 50000. ... additional arguments pass `samp`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/pred.mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate of predictive interval of `T|data` using Monte Carlo integration. — pred.mle","text":"1. Sample MVN `x` 2. Compute `f(t,x)` sample 3. Take mean `f(t,x)` values asn estimate `f(t)`. `samp` function used sample distribution `T|x`. designed take","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/print.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the number of observations in the sample used by\nan `mle` object `x`. — print.mle","title":"Method for obtaining the number of observations in the sample used by\nan `mle` object `x`. — print.mle","text":"Method obtaining number observations sample used `mle` object `x`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/print.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the number of observations in the sample used by\nan `mle` object `x`. — print.mle","text":"","code":"# S3 method for mle print(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/print.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the number of observations in the sample used by\nan `mle` object `x`. — print.mle","text":"x `mle` object print ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/print.summary_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for printing a `summary` object for an `mle` object. — print.summary_mle","title":"Function for printing a `summary` object for an `mle` object. — print.summary_mle","text":"Function printing `summary` object `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/print.summary_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for printing a `summary` object for an `mle` object. — print.summary_mle","text":"","code":"# S3 method for summary_mle print(object, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/print.summary_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for printing a `summary` object for an `mle` object. — print.summary_mle","text":"object `summary_mle` object ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/rmap.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the distribution of `g(x)` where `x` is an `mle` object. — rmap.mle","title":"Computes the distribution of `g(x)` where `x` is an `mle` object. — rmap.mle","text":"invariance property MLE, `x` `mle` object, right conditions, asymptotically, `g(x)` normally distributed,     g(x) ~ normal(g(point(x)),sigma) `sigma` variance-covariance `f(x)`","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/rmap.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the distribution of `g(x)` where `x` is an `mle` object. — rmap.mle","text":"","code":"rmap.mle(x, g, ..., n = 1000L, method = c(\"mc\", \"delta\"))"},{"path":"https://queelius.github.io/algebraic.mle/reference/rmap.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the distribution of `g(x)` where `x` is an `mle` object. — rmap.mle","text":"x `mle` object g function ... additional arguments pass `g` function n number samples take estimate distribution `g(x)` `method == \"mc\"`. method method use estimate distribution `g(x)`, \"delta\" \"mc\".","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/rmap.mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the distribution of `g(x)` where `x` is an `mle` object. — rmap.mle","text":"provide two different methods estimating variance-covariance `f(x)`:     method = \"delta\" -> delta method     method = \"mc\" -> monte carlo method","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for sampling from an `mle` object. — sampler.mle","title":"Method for sampling from an `mle` object. — sampler.mle","text":"creates sampler `mle` object. returns function accepts single parameter `n` denoting number samples draw `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for sampling from an `mle` object. — sampler.mle","text":"","code":"# S3 method for mle sampler(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for sampling from an `mle` object. — sampler.mle","text":"x `mle` object create sampler ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for sampling from an `mle_boot` object. — sampler.mle_boot","title":"Method for sampling from an `mle_boot` object. — sampler.mle_boot","text":"creates sampler `mle_boot` object. returns function accepts single parameter `n` denoting number samples draw `mle_boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for sampling from an `mle_boot` object. — sampler.mle_boot","text":"","code":"# S3 method for mle_boot sampler(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for sampling from an `mle_boot` object. — sampler.mle_boot","text":"x `mle_boot` object create sampler ... additional arguments pass (used)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sampler.mle_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method for sampling from an `mle_boot` object. — sampler.mle_boot","text":"Unlike `sampler` method general `mle` objects, `mle_boot` objects, sample bootstrap replicates, representative sampling distribution, particularly small samples.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/score_val.html","id":null,"dir":"Reference","previous_headings":"","what":"score — score_val","title":"score — score_val","text":"Generic function computing score estimator object respect log-likelihood.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/score_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"score — score_val","text":"","code":"score_val(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/score_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"score — score_val","text":"x object compute score . ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/score_val.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the score of an `mle` object (score evaluated at the MLE). — score_val.mle","title":"Computes the score of an `mle` object (score evaluated at the MLE). — score_val.mle","text":"reguarlity conditions satisfied, zero (approximately, rounding errors occur).","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/score_val.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the score of an `mle` object (score evaluated at the MLE). — score_val.mle","text":"","code":"# S3 method for mle score_val(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/score_val.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the score of an `mle` object (score evaluated at the MLE). — score_val.mle","text":"x object compute score . ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/se.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for obtaining the standard error of an estimator. — se","title":"Method for obtaining the standard error of an estimator. — se","text":"Method obtaining standard error estimator.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for obtaining the standard error of an estimator. — se","text":"","code":"se(x, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for obtaining the standard error of an estimator. — se","text":"x estimator ... additional arguments pass","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/se.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for obtaining an estimate of the standard error of the MLE\nobject `x`. — se.mle","title":"Function for obtaining an estimate of the standard error of the MLE\nobject `x`. — se.mle","text":"Function obtaining estimate standard error MLE object `x`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/se.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for obtaining an estimate of the standard error of the MLE\nobject `x`. — se.mle","text":"","code":"# S3 method for mle se(x, se.matrix = FALSE, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/se.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for obtaining an estimate of the standard error of the MLE\nobject `x`. — se.mle","text":"x MLE object se.matrix `TRUE`, return square root variance-covariance ... additional arguments pass (used)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sim_anneal.html","id":null,"dir":"Reference","previous_headings":"","what":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","title":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","text":"function implements simulated annealing algorithm, global optimization algorithm useful finding good starting point local optimization algorithm. return MLE object , good estimate MLE, gradient `f` evaluated solution close zero, assuming MLE interior domain `f`. However, since algorithm guided gradient information, sensitive gradient `f` instead seeks maximize `f`.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sim_anneal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","text":"","code":"sim_anneal(par, fn, control = list(), ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/sim_anneal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","text":"par Initial guess fn Objective function maximize control List optional arguments ... Additional arguments may passed; loads options, also passed `neigh`","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sim_anneal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","text":"list, members include:            `par`: best solution            `value`: function value `fn(par)`            `fn_count`: count `fn` invocations            `accepted`: count accepted moves            `trace_info`: matrix trace information (optional)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sim_anneal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","text":"sim_anneal(): control","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/sim_anneal.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"This function implements the simulated annealing algorithm,\nwhich is a global optimization algorithm that is useful for\nfinding a good starting point for a local optimization algorithm.\nWe do not return this as an MLE object because, to be a good\nestimate of the MLE, the gradient of `f` evaluated\nat its solution should be close to zero, assuming the MLE\nis interior to the domain of `f`. However, since this algorithm\nis not guided by gradient information, it is not sensitive to\nthe gradient of `f` and instead only seeks to maximize `f`. — sim_anneal","text":"t_init Initial temperature, defaults 100 t_end Final temperature, defaults 0 alpha Numberic, cooling factor, defaults .95 REPORT frequency reports control$debug > 0. Defaults every 100 iterations. it_per_temp Ineger, iterations per temperature, defaults 100 maxit Integer, maximum number iterations, defaults 100000 accept_p Acceptance probability function, defaults `runif(1) < exp((val0 - val1) / temp)`, `val0` function value current position `val1` function value proposed position. pass `temp` (temperature), `val1` (new value candidate position `par1`), `val0` (old value current position), `` (iteration), `...` arguments `accept_p`. fnscale Scaling factor `fn`, defaults 1. negative, turns problem maximization problem. sup Support function, returns TRUE `par` domain `fn` proj Projection function, returns vector domain `fn` neigh Neighborhood function, returns random neighbor `par`, defaults `par + rnorm(length(par))`. pass `par` `temp`, ``, `value`, `...` arguments `neigh`. trace logical, whether store current changes position associated values `trace_info` matrix.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/summary.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for obtaining a summary of `object`, which is a fitted\n`mle` object. — summary.mle","title":"Function for obtaining a summary of `object`, which is a fitted\n`mle` object. — summary.mle","text":"Function obtaining summary `object`, fitted `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/summary.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for obtaining a summary of `object`, which is a fitted\n`mle` object. — summary.mle","text":"","code":"# S3 method for mle summary(object, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/summary.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for obtaining a summary of `object`, which is a fitted\n`mle` object. — summary.mle","text":"object `mle` object ... pass additional arguments","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the variance-covariance matrix of `mle` object. — vcov.mle","title":"Computes the variance-covariance matrix of `mle` object. — vcov.mle","text":"Computes variance-covariance matrix `mle` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the variance-covariance matrix of `mle` object. — vcov.mle","text":"","code":"# S3 method for mle vcov(object, ...)"},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the variance-covariance matrix of `mle` object. — vcov.mle","text":"object `mle` object obtain variance-covariance ... additional arguments pass (used)","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the variance-covariance matrix of `mle` object. — vcov.mle","text":"variance-covariance matrix","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the variance-covariance matrix of `boot` object. — vcov.mle_boot","title":"Computes the variance-covariance matrix of `boot` object. — vcov.mle_boot","text":"Computes variance-covariance matrix `boot` object.","code":""},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the variance-covariance matrix of `boot` object. — vcov.mle_boot","text":"","code":"# S3 method for mle_boot vcov(x)"},{"path":"https://queelius.github.io/algebraic.mle/reference/vcov.mle_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the variance-covariance matrix of `boot` object. — vcov.mle_boot","text":"object `boot` object obtain variance-covariance ... additional arguments pass","code":""}]
