% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/numerical_mle.R
\name{sim_anneal}
\alias{sim_anneal}
\title{sim_anneal}
\usage{
sim_anneal(f, x0, options = list(), ...)
}
\arguments{
\item{f}{Objective function to maximize}

\item{x0}{Initial guess}

\item{options}{List of optional arguments}

\item{...}{Additional arguments that may be passed to `neigh`}
}
\value{
list with best solution (argmax) and its corresponding
        objective function value (max), and optionally path
}
\description{
This function implements the simulated annealing algorithm,
which is a global optimization algorithm that is useful for
finding a good starting point for a local optimization algorithm.
We do not return this as an MLE object because, to be a good
estimate of the MLE, the gradient of `f` evaluated
at its solution should be close to zero, assuming the MLE
is interior to the domain of `f`. However, since this algorithm
is not guided by gradient information, it is not sensitive to
the gradient of `f` and instead only seeks to maximize `f`.
}
\section{Functions}{
\itemize{
\item \code{sim_anneal()}: options

}}
\section{Fields}{

\describe{
\item{\code{t_init}}{Initial temperature}

\item{\code{t_end}}{Final temperature}

\item{\code{alpha}}{Cooling factor}

\item{\code{iter_per_temp}}{Number of iterations per temperature}

\item{\code{max_iter}}{Maximum number of iterations, used instead of t_end
if not NULL, defaults to NULL}

\item{\code{debug}}{If TRUE, print debugging information to the console}

\item{\code{trace}}{If TRUE, track the history of positions and values}

\item{\code{sup}}{Support function, returns TRUE if x is in the domain of f}

\item{\code{neigh}}{Neighborhood function, returns a random neighbor of x}
}}

